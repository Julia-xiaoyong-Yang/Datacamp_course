import torch
import torch.nn as nn

class MultiHeadAttention(nn.Module):
    def __init__(self, d_model, num_heads):
        super(MultiHeadAttention, self).__init__()
        # Set the number of attention heads
        self.num_heads = num_heads
        self.d_model = d_model
        self.head_dim = d_model // num_heads
        
        # Ensure d_model is divisible by num_heads
        assert d_model % num_heads == 0, "d_model must be divisible by num_heads"
        
        # Set up the linear transformations
        self.query_linear = nn.Linear(d_model, d_model)
        self.key_linear = nn.Linear(d_model, d_model)
        self.value_linear = nn.Linear(d_model, d_model)
        self.output_linear = nn.Linear(d_model, d_model)
        
        # Softmax for attention scores
        self.softmax = nn.Softmax(dim=-1)
    
    def forward(self, queries, keys, values, mask=None):
        batch_size = queries.size(0)
        
        # Linear projections
        Q = self.query_linear(queries)  # (batch_size, seq_len, d_model)
        K = self.key_linear(keys)      # (batch_size, seq_len, d_model)
        V = self.value_linear(values)  # (batch_size, seq_len, d_model)
        
        # Reshape and split into heads
        Q = Q.view(batch_size, -1, self.num_heads, self.head_dim).transpose(1, 2)  # (batch_size, num_heads, seq_len, head_dim)
        K = K.view(batch_size, -1, self.num_heads, self.head_dim).transpose(1, 2)  # (batch_size, num_heads, seq_len, head_dim)
        V = V.view(batch_size, -1, self.num_heads, self.head_dim).transpose(1, 2)  # (batch_size, num_heads, seq_len, head_dim)
        
        # Scaled dot-product attention
        scores = torch.matmul(Q, K.transpose(-2, -1)) / (self.head_dim ** 0.5)  # (batch_size, num_heads, seq_len, seq_len)
        
        if mask is not None:
            scores = scores.masked_fill(mask == 0, float('-inf'))
        
        attn_weights = self.softmax(scores)  # (batch_size, num_heads, seq_len, seq_len)
        context = torch.matmul(attn_weights, V)  # (batch_size, num_heads, seq_len, head_dim)
        
        # Concatenate heads and pass through the final linear layer
        context = context.transpose(1, 2).contiguous().view(batch_size, -1, self.d_model)  # (batch_size, seq_len, d_model)
        output = self.output_linear(context)  # (batch_size, seq_len, d_model)
        
        return output, attn_weights

  def split_heads(self, x, batch_size):
    # Split the sequence embeddings in x across the attention heads
    x = x.view(batch_size, -1, self.num_heads, self.head_dim)  # Reshape for multi-head attention
    return x.permute(0, 2, 1, 3).contiguous().view(batch_size * self.num_heads, -1, self.head_dim)


  def compute_attention(self, query, key, mask=None):
    # Compute dot-product attention scores
    scores = torch.matmul(query, key.transpose(-2, -1))  # (batch_size * num_heads, seq_len, seq_len)
    
    if mask is not None:
        scores = scores.masked_fill(mask == 0, float("-1e20"))  # Apply mask (e.g., padding mask)
    
    # Normalize attention scores into attention weights
    attention_weights = torch.softmax(scores, dim=-1)  # Apply softmax along the last dimension
    
    return attention_weights


  def forward(self, query, key, value, mask=None):
    batch_size = query.size(0)

    # Linear transformations and split into heads
    query = self.split_heads(self.query_linear(query), batch_size)
    key = self.split_heads(self.key_linear(key), batch_size)
    value = self.split_heads(self.value_linear(value), batch_size)

    # Compute attention weights
    attention_weights = self.compute_attention(query, key, mask)

    # Multiply attention weights by values
    output = torch.matmul(attention_weights, value)  # (batch_size * num_heads, seq_len, head_dim)

    # Concatenate heads and linearly project outputs
    output = output.view(batch_size, self.num_heads, -1, self.head_dim)  # (batch_size, num_heads, seq_len, head_dim)
    output = output.permute(0, 2, 1, 3).contiguous().view(batch_size, -1, self.d_model)  # (batch_size, seq_len, d_model)
    
    return self.output_linear(output)  # Final linear projection
